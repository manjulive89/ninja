<?php
namespace Ninja;

/**
* Handles logging
*/
class Log
{
	// Log message levels from http://php.net/manual/en/function.define-syslog-variables.php
	const EMERGENCY = 0;	// LOG_EMERG
	const ALERT     = 1;	// LOG_ALERT
	const CRITICAL  = 2;	// LOG_CRIT
	const ERROR     = 3;	// LOG_ERR
	const WARNING   = 4;	// LOG_WARNING
	const NOTICE    = 5;	// LOG_NOTICE
	const INFO      = 6;	// LOG_INFO
	const DEBUG     = 7;	// LOG_DEBUG

	const _PHP_EXCEPTION = 100; // An exception generated by php, handled by Ninja. (internal use only)

    /**
     * @var array
     */
	protected $_logLevelsFilemap = array(
			0   => 'emergency',
			1	=> 'alert',
			2   => 'critical',
			3   => 'error',
			4	=> 'warning',
			5  	=> 'notice',
			6   => 'info',
			7   => 'debug',
			
			100 => 'php_error',
		);

    /**
     * Whether the logger has been initialized or not?
     * @var bool
     */
	private $_isInitialized = false;

	/**
	* List of log messages
	* 
	* @var array
	*/
	protected $_messages;

	
	public function __construct()
	{
        /**
         * Do nothing in constructor yet, let's do the initialization only when first log has to be written.
         * We mantain a flag variable _isInitialized that tells us whether the logger has been initialized or not.
         */
	}
	
    /**
     * Adds a message to the log. Replacement values must be passed in to be
     * replaced using [strtr](http://php.net/strtr).
     *
     *     $log->add(Log::ERROR, 'Could not locate user: :user', array(
     *         ':user' => $username,
     *     ));
     *
     * @param int $level level of message
     * @param string $message message body
     * @param array|null $values values to replace in the message
     * @return \Ninja\Log
     */
	public function add($level, $message, array $values = null)
	{
		// Check if initialized?
		if ($this->_isInitialized === false)
		{
			$this->_messages = array();	
			
			// Write all the logs during shutdown
			register_shutdown_function( array($this, 'write') );
			
			$this->_isInitialized = true;
		}
		
		// Initialized, let's process this add
		if ($values)
		{
			// Insert the values into the message queue
			$message = strtr($message, $values);
		}

		// Create a new message and timestamp it
		$this->_messages[] = array(
			'time'  => date('d-M-Y h:i:s'),
			'level' => $level,
			'body'  => $message,
		);

		return $this;
	}
	
	/**
	* Write all messages. (Automatically called, do not call it yourself.)
	* 
	*/
	public function write()
	{
		if (empty($this->_messages))
		{
			// There is nothing to write, move along
			return;
		}
		
		// Move all messages into local variable
		$messages = $this->_messages;

		// Reset the messages array
		$this->_messages = array();
		
		/**
		* Right now let's just implement a simple File Writer
		* In the future we can add more writers like kohana does in their Kohana_Log class
		*/
		foreach ($messages as $message)
		{
			if ($message['level'] === self::DEBUG)
			{
				//if level == DEBUG, then additional logic
				if (\Ninja::$debug === false)
					continue; //if debug mode is OFF, then DO NOT write
				
				
				if (is_null($message['body']))
				{
					$message['body'] = 'NULL';
				}
				else if (!is_scalar($message['body']))
				{
					//else if(is_object($var) || is_array($var) || is_resource($var))
					$message['body'] = print_r($message['body'], true);
				} 
				else if (is_bool($message['body']))
				{
					$message['body'] = ($message['body'] === true) ? 'TRUE' : 'FALSE';
				}
			}
			
			$msg  = PHP_EOL;
			$msg .= "--------------------------------------" . PHP_EOL;
			$msg .= '[' . $message['time'] . ']' . PHP_EOL;
			$msg .= $message['body'] . PHP_EOL;
			$msg .= "--------------------------------------";
			
			$filename = NINJA_LOGS_PATH;
			
			if (isset($this->_logLevelsFilemap[$message['level']]))
			{
				$filename .= $this->_logLevelsFilemap[$message['level']];
			}
			else
			{
				$filename .= strtolower($message['level']);
			}
			
			$filename .= '.log';
			file_put_contents($filename, $msg, FILE_APPEND);
		}
	}
}